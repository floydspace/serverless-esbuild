// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`complete 1`] = `
""use strict";var e=Object.create;var a=Object.defineProperty;var I=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var l=Object.getPrototypeOf,u=Object.prototype.hasOwnProperty;var c=(i,n)=>{for(var s in n)a(i,s,{get:n[s],enumerable:!0})},o=(i,n,s,r)=>{if(n&&typeof n=="object"||typeof n=="function")for(let t of f(n))!u.call(i,t)&&t!==s&&a(i,t,{get:()=>n[t],enumerable:!(r=I(n,t))||r.enumerable});return i};var g=(i,n,s)=>(s=i!=null?e(l(i)):{},o(n||!i||!i.__esModule?a(s,"default",{value:i,enumerable:!0}):s,i)),m=i=>o(a({},"__esModule",{value:!0}),i);var y={};c(y,{handler:()=>p});module.exports=m(y);var d=g(require("isin-validator"));async function p(i){let n=(0,d.default)(i);return{statusCode:200,body:JSON.stringify({message:n?"ISIN is invalid!":"ISIN is fine!",input:i})}}0&&(module.exports={handler});
"
`;

exports[`complete 2`] = `"2010-09-09"`;

exports[`complete 3`] = `"The AWS CloudFormation template for this Serverless application"`;

exports[`complete 4`] = `
{
  "ServerlessDeploymentBucketName": {
    "Export": {
      "Name": "sls-complete-example-dev-ServerlessDeploymentBucketName",
    },
    "Value": {
      "Ref": "ServerlessDeploymentBucket",
    },
  },
  "ServiceEndpoint": {
    "Description": "URL of the service endpoint",
    "Export": {
      "Name": "sls-complete-example-dev-ServiceEndpoint",
    },
    "Value": {
      "Fn::Join": [
        "",
        [
          "https://",
          {
            "Ref": "ApiGatewayRestApi",
          },
          ".execute-api.",
          {
            "Ref": "AWS::Region",
          },
          ".",
          {
            "Ref": "AWS::URLSuffix",
          },
          "/dev",
        ],
      ],
    },
  },
  "ValidateIsinLambdaFunctionQualifiedArn": {
    "Description": "Current Lambda function version",
    "Export": {
      "Name": "sls-complete-example-dev-ValidateIsinLambdaFunctionQualifiedArn",
    },
    "Value": {
      "Ref": StringContaining "ValidateIsinLambdaVersion",
    },
  },
}
`;

exports[`complete 5`] = `
{
  "ApiGatewayMethodValidateDashisinIsinVarGet": {
    "DependsOn": [
      "ValidateIsinLambdaPermissionApiGateway",
    ],
    "Properties": {
      "ApiKeyRequired": false,
      "AuthorizationType": "NONE",
      "HttpMethod": "GET",
      "Integration": {
        "IntegrationHttpMethod": "POST",
        "Type": "AWS_PROXY",
        "Uri": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region",
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "ValidateIsinLambdaFunction",
                  "Arn",
                ],
              },
              "/invocations",
            ],
          ],
        },
      },
      "MethodResponses": [],
      "RequestParameters": {},
      "ResourceId": {
        "Ref": "ApiGatewayResourceValidateDashisinIsinVar",
      },
      "RestApiId": {
        "Ref": "ApiGatewayRestApi",
      },
    },
    "Type": "AWS::ApiGateway::Method",
  },
  "ApiGatewayResourceValidateDashisin": {
    "Properties": {
      "ParentId": {
        "Fn::GetAtt": [
          "ApiGatewayRestApi",
          "RootResourceId",
        ],
      },
      "PathPart": "validate-isin",
      "RestApiId": {
        "Ref": "ApiGatewayRestApi",
      },
    },
    "Type": "AWS::ApiGateway::Resource",
  },
  "ApiGatewayResourceValidateDashisinIsinVar": {
    "Properties": {
      "ParentId": {
        "Ref": "ApiGatewayResourceValidateDashisin",
      },
      "PathPart": "{isin}",
      "RestApiId": {
        "Ref": "ApiGatewayRestApi",
      },
    },
    "Type": "AWS::ApiGateway::Resource",
  },
  "ApiGatewayRestApi": {
    "Properties": {
      "EndpointConfiguration": {
        "Types": [
          "EDGE",
        ],
      },
      "Name": "dev-complete-example",
      "Policy": "",
    },
    "Type": "AWS::ApiGateway::RestApi",
  },
  "IamRoleLambdaExecution": {
    "Properties": {
      "AssumeRolePolicyDocument": {
        "Statement": [
          {
            "Action": [
              "sts:AssumeRole",
            ],
            "Effect": "Allow",
            "Principal": {
              "Service": [
                "lambda.amazonaws.com",
              ],
            },
          },
        ],
        "Version": "2012-10-17",
      },
      "Path": "/",
      "Policies": [
        {
          "PolicyDocument": {
            "Statement": [
              {
                "Action": [
                  "logs:CreateLogStream",
                  "logs:CreateLogGroup",
                  "logs:TagResource",
                ],
                "Effect": "Allow",
                "Resource": [
                  {
                    "Fn::Sub": "arn:\${AWS::Partition}:logs:\${AWS::Region}:\${AWS::AccountId}:log-group:/aws/lambda/complete-example-dev*:*",
                  },
                ],
              },
              {
                "Action": [
                  "logs:PutLogEvents",
                ],
                "Effect": "Allow",
                "Resource": [
                  {
                    "Fn::Sub": "arn:\${AWS::Partition}:logs:\${AWS::Region}:\${AWS::AccountId}:log-group:/aws/lambda/complete-example-dev*:*:*",
                  },
                ],
              },
            ],
            "Version": "2012-10-17",
          },
          "PolicyName": {
            "Fn::Join": [
              "-",
              [
                "complete-example",
                "dev",
                "lambda",
              ],
            ],
          },
        },
      ],
      "RoleName": {
        "Fn::Join": [
          "-",
          [
            "complete-example",
            "dev",
            {
              "Ref": "AWS::Region",
            },
            "lambdaRole",
          ],
        ],
      },
    },
    "Type": "AWS::IAM::Role",
  },
  "ServerlessDeploymentBucket": {
    "Properties": {
      "BucketEncryption": {
        "ServerSideEncryptionConfiguration": [
          {
            "ServerSideEncryptionByDefault": {
              "SSEAlgorithm": "AES256",
            },
          },
        ],
      },
    },
    "Type": "AWS::S3::Bucket",
  },
  "ServerlessDeploymentBucketPolicy": {
    "Properties": {
      "Bucket": {
        "Ref": "ServerlessDeploymentBucket",
      },
      "PolicyDocument": {
        "Statement": [
          {
            "Action": "s3:*",
            "Condition": {
              "Bool": {
                "aws:SecureTransport": false,
              },
            },
            "Effect": "Deny",
            "Principal": "*",
            "Resource": [
              {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":s3:::",
                    {
                      "Ref": "ServerlessDeploymentBucket",
                    },
                    "/*",
                  ],
                ],
              },
              {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":s3:::",
                    {
                      "Ref": "ServerlessDeploymentBucket",
                    },
                  ],
                ],
              },
            ],
          },
        ],
      },
    },
    "Type": "AWS::S3::BucketPolicy",
  },
  "ValidateIsinLambdaFunction": {
    "DependsOn": [
      "ValidateIsinLogGroup",
    ],
    "Properties": {
      "Code": {
        "S3Bucket": {
          "Ref": "ServerlessDeploymentBucket",
        },
        "S3Key": StringContaining "complete-example.zip",
      },
      "FunctionName": "complete-example-dev-validateIsin",
      "Handler": "src/index.handler",
      "MemorySize": 1024,
      "Role": {
        "Fn::GetAtt": [
          "IamRoleLambdaExecution",
          "Arn",
        ],
      },
      "Runtime": "nodejs18.x",
      "Timeout": 6,
    },
    "Type": "AWS::Lambda::Function",
  },
  "ValidateIsinLambdaPermissionApiGateway": {
    "Properties": {
      "Action": "lambda:InvokeFunction",
      "FunctionName": {
        "Fn::GetAtt": [
          "ValidateIsinLambdaFunction",
          "Arn",
        ],
      },
      "Principal": "apigateway.amazonaws.com",
      "SourceArn": {
        "Fn::Join": [
          "",
          [
            "arn:",
            {
              "Ref": "AWS::Partition",
            },
            ":execute-api:",
            {
              "Ref": "AWS::Region",
            },
            ":",
            {
              "Ref": "AWS::AccountId",
            },
            ":",
            {
              "Ref": "ApiGatewayRestApi",
            },
            "/*/*",
          ],
        ],
      },
    },
    "Type": "AWS::Lambda::Permission",
  },
  "ValidateIsinLogGroup": {
    "Properties": {
      "LogGroupName": "/aws/lambda/complete-example-dev-validateIsin",
    },
    "Type": "AWS::Logs::LogGroup",
  },
}
`;

exports[`complete 6`] = `
{
  "DependsOn": [
    "ApiGatewayMethodValidateDashisinIsinVarGet",
  ],
  "Properties": {
    "RestApiId": {
      "Ref": "ApiGatewayRestApi",
    },
    "StageName": "dev",
  },
  "Type": "AWS::ApiGateway::Deployment",
}
`;

exports[`complete 7`] = `
{
  "DeletionPolicy": "Retain",
  "Properties": {
    "CodeSha256": Any<String>,
    "FunctionName": {
      "Ref": "ValidateIsinLambdaFunction",
    },
  },
  "Type": "AWS::Lambda::Version",
}
`;
