// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`individually 1`] = `
""use strict";var c=Object.create;var r=Object.defineProperty;var a=Object.getOwnPropertyDescriptor;var d=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var u=(n,o)=>r(n,"name",{value:o,configurable:!0});var p=(n,o)=>{for(var e in o)r(n,e,{get:o[e],enumerable:!0})},i=(n,o,e,t)=>{if(o&&typeof o=="object"||typeof o=="function")for(let s of d(o))!m.call(n,s)&&s!==e&&r(n,s,{get:()=>o[s],enumerable:!(t=a(o,s))||t.enumerable});return n};var w=(n,o,e)=>(e=n!=null?c(f(n)):{},i(o||!n||!n.__esModule?r(e,"default",{value:n,enumerable:!0}):e,n)),y=n=>i(r({},"__esModule",{value:!0}),n);var k={};p(k,{handler:()=>g});module.exports=y(k);var l=w(require("lodash"));async function g(n,o,e){console.log(l.VERSION),await new Promise(s=>{setTimeout(s,500)});let t={statusCode:200,body:JSON.stringify({message:"Go Serverless v1.0! Your function executed successfully!",input:n})};e(null,t)}u(g,"handler");0&&(module.exports={handler});
"
`;

exports[`individually 2`] = `
""use strict";var t=Object.defineProperty;var i=Object.getOwnPropertyDescriptor;var c=Object.getOwnPropertyNames;var l=Object.prototype.hasOwnProperty;var u=(e,n)=>t(e,"name",{value:n,configurable:!0});var a=(e,n)=>{for(var s in n)t(e,s,{get:n[s],enumerable:!0})},d=(e,n,s,r)=>{if(n&&typeof n=="object"||typeof n=="function")for(let o of c(n))!l.call(e,o)&&o!==s&&t(e,o,{get:()=>n[o],enumerable:!(r=i(n,o))||r.enumerable});return e};var w=e=>d(t({},"__esModule",{value:!0}),e);var p={};a(p,{handler:()=>f});module.exports=w(p);async function f(e,n,s){await new Promise(o=>{setTimeout(o,500)});let r={statusCode:200,body:JSON.stringify({message:"Go Serverless v1.0! Your function executed successfully!",input:e})};s(null,r)}u(f,"handler");0&&(module.exports={handler});
"
`;

exports[`individually 3`] = `"2010-09-09"`;

exports[`individually 4`] = `"The AWS CloudFormation template for this Serverless application"`;

exports[`individually 5`] = `
{
  "Hello1LambdaFunctionQualifiedArn": {
    "Description": "Current Lambda function version",
    "Export": {
      "Name": "sls-serverless-example-dev-Hello1LambdaFunctionQualifiedArn",
    },
    "Value": {
      "Ref": Any<String>,
    },
  },
  "Hello2LambdaFunctionQualifiedArn": {
    "Description": "Current Lambda function version",
    "Export": {
      "Name": "sls-serverless-example-dev-Hello2LambdaFunctionQualifiedArn",
    },
    "Value": {
      "Ref": Any<String>,
    },
  },
  "ServerlessDeploymentBucketName": {
    "Export": {
      "Name": "sls-serverless-example-dev-ServerlessDeploymentBucketName",
    },
    "Value": {
      "Ref": "ServerlessDeploymentBucket",
    },
  },
  "ServiceEndpoint": {
    "Description": "URL of the service endpoint",
    "Export": {
      "Name": "sls-serverless-example-dev-ServiceEndpoint",
    },
    "Value": {
      "Fn::Join": [
        "",
        [
          "https://",
          {
            "Ref": "ApiGatewayRestApi",
          },
          ".execute-api.",
          {
            "Ref": "AWS::Region",
          },
          ".",
          {
            "Ref": "AWS::URLSuffix",
          },
          "/dev",
        ],
      ],
    },
  },
}
`;

exports[`individually 6`] = `
{
  "ApiGatewayMethodHello1Get": {
    "DependsOn": [
      "Hello1LambdaPermissionApiGateway",
    ],
    "Properties": {
      "ApiKeyRequired": false,
      "AuthorizationType": "NONE",
      "HttpMethod": "GET",
      "Integration": {
        "IntegrationHttpMethod": "POST",
        "Type": "AWS_PROXY",
        "Uri": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region",
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "Hello1LambdaFunction",
                  "Arn",
                ],
              },
              "/invocations",
            ],
          ],
        },
      },
      "MethodResponses": [],
      "RequestParameters": {},
      "ResourceId": {
        "Ref": "ApiGatewayResourceHello1",
      },
      "RestApiId": {
        "Ref": "ApiGatewayRestApi",
      },
    },
    "Type": "AWS::ApiGateway::Method",
  },
  "ApiGatewayMethodHello2Get": {
    "DependsOn": [
      "Hello2LambdaPermissionApiGateway",
    ],
    "Properties": {
      "ApiKeyRequired": false,
      "AuthorizationType": "NONE",
      "HttpMethod": "GET",
      "Integration": {
        "IntegrationHttpMethod": "POST",
        "Type": "AWS_PROXY",
        "Uri": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region",
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "Hello2LambdaFunction",
                  "Arn",
                ],
              },
              "/invocations",
            ],
          ],
        },
      },
      "MethodResponses": [],
      "RequestParameters": {},
      "ResourceId": {
        "Ref": "ApiGatewayResourceHello2",
      },
      "RestApiId": {
        "Ref": "ApiGatewayRestApi",
      },
    },
    "Type": "AWS::ApiGateway::Method",
  },
  "ApiGatewayResourceHello1": {
    "Properties": {
      "ParentId": {
        "Fn::GetAtt": [
          "ApiGatewayRestApi",
          "RootResourceId",
        ],
      },
      "PathPart": "hello1",
      "RestApiId": {
        "Ref": "ApiGatewayRestApi",
      },
    },
    "Type": "AWS::ApiGateway::Resource",
  },
  "ApiGatewayResourceHello2": {
    "Properties": {
      "ParentId": {
        "Fn::GetAtt": [
          "ApiGatewayRestApi",
          "RootResourceId",
        ],
      },
      "PathPart": "hello2",
      "RestApiId": {
        "Ref": "ApiGatewayRestApi",
      },
    },
    "Type": "AWS::ApiGateway::Resource",
  },
  "ApiGatewayRestApi": {
    "Properties": {
      "EndpointConfiguration": {
        "Types": [
          "EDGE",
        ],
      },
      "Name": "dev-serverless-example",
      "Policy": "",
    },
    "Type": "AWS::ApiGateway::RestApi",
  },
  "Hello1LambdaFunction": {
    "DependsOn": [
      "Hello1LogGroup",
    ],
    "Properties": {
      "Code": {
        "S3Bucket": {
          "Ref": "ServerlessDeploymentBucket",
        },
        "S3Key": StringContaining "hello1.zip",
      },
      "FunctionName": "serverless-example-dev-hello1",
      "Handler": "hello1.handler",
      "MemorySize": 1024,
      "Role": {
        "Fn::GetAtt": [
          "IamRoleLambdaExecution",
          "Arn",
        ],
      },
      "Runtime": "nodejs12.x",
      "Timeout": 6,
    },
    "Type": "AWS::Lambda::Function",
  },
  "Hello1LambdaPermissionApiGateway": {
    "Properties": {
      "Action": "lambda:InvokeFunction",
      "FunctionName": {
        "Fn::GetAtt": [
          "Hello1LambdaFunction",
          "Arn",
        ],
      },
      "Principal": "apigateway.amazonaws.com",
      "SourceArn": {
        "Fn::Join": [
          "",
          [
            "arn:",
            {
              "Ref": "AWS::Partition",
            },
            ":execute-api:",
            {
              "Ref": "AWS::Region",
            },
            ":",
            {
              "Ref": "AWS::AccountId",
            },
            ":",
            {
              "Ref": "ApiGatewayRestApi",
            },
            "/*/*",
          ],
        ],
      },
    },
    "Type": "AWS::Lambda::Permission",
  },
  "Hello1LambdaVersionqyTqMsAZeV1QTgSjgi7R8m22Nxwiz362dk0yxdoMxtM": {
    "DeletionPolicy": "Retain",
    "Properties": {
      "CodeSha256": Any<String>,
      "FunctionName": {
        "Ref": "Hello1LambdaFunction",
      },
    },
    "Type": "AWS::Lambda::Version",
  },
  "Hello1LogGroup": {
    "Properties": {
      "LogGroupName": "/aws/lambda/serverless-example-dev-hello1",
    },
    "Type": "AWS::Logs::LogGroup",
  },
  "Hello2LambdaFunction": {
    "DependsOn": [
      "Hello2LogGroup",
    ],
    "Properties": {
      "Code": {
        "S3Bucket": {
          "Ref": "ServerlessDeploymentBucket",
        },
        "S3Key": StringContaining "hello2.zip",
      },
      "FunctionName": "serverless-example-dev-hello2",
      "Handler": "hello2.handler",
      "MemorySize": 1024,
      "Role": {
        "Fn::GetAtt": [
          "IamRoleLambdaExecution",
          "Arn",
        ],
      },
      "Runtime": "nodejs12.x",
      "Timeout": 6,
    },
    "Type": "AWS::Lambda::Function",
  },
  "Hello2LambdaPermissionApiGateway": {
    "Properties": {
      "Action": "lambda:InvokeFunction",
      "FunctionName": {
        "Fn::GetAtt": [
          "Hello2LambdaFunction",
          "Arn",
        ],
      },
      "Principal": "apigateway.amazonaws.com",
      "SourceArn": {
        "Fn::Join": [
          "",
          [
            "arn:",
            {
              "Ref": "AWS::Partition",
            },
            ":execute-api:",
            {
              "Ref": "AWS::Region",
            },
            ":",
            {
              "Ref": "AWS::AccountId",
            },
            ":",
            {
              "Ref": "ApiGatewayRestApi",
            },
            "/*/*",
          ],
        ],
      },
    },
    "Type": "AWS::Lambda::Permission",
  },
  "Hello2LambdaVersionaTDB2bSCKGcbvS8xC3zEaTnnva83mXQ1t1W3FG5lIuA": {
    "DeletionPolicy": "Retain",
    "Properties": {
      "CodeSha256": Any<String>,
      "FunctionName": {
        "Ref": "Hello2LambdaFunction",
      },
    },
    "Type": "AWS::Lambda::Version",
  },
  "Hello2LogGroup": {
    "Properties": {
      "LogGroupName": "/aws/lambda/serverless-example-dev-hello2",
    },
    "Type": "AWS::Logs::LogGroup",
  },
  "IamRoleLambdaExecution": {
    "Properties": {
      "AssumeRolePolicyDocument": {
        "Statement": [
          {
            "Action": [
              "sts:AssumeRole",
            ],
            "Effect": "Allow",
            "Principal": {
              "Service": [
                "lambda.amazonaws.com",
              ],
            },
          },
        ],
        "Version": "2012-10-17",
      },
      "Path": "/",
      "Policies": [
        {
          "PolicyDocument": {
            "Statement": [
              {
                "Action": [
                  "logs:CreateLogStream",
                  "logs:CreateLogGroup",
                ],
                "Effect": "Allow",
                "Resource": [
                  {
                    "Fn::Sub": "arn:\${AWS::Partition}:logs:\${AWS::Region}:\${AWS::AccountId}:log-group:/aws/lambda/serverless-example-dev*:*",
                  },
                ],
              },
              {
                "Action": [
                  "logs:PutLogEvents",
                ],
                "Effect": "Allow",
                "Resource": [
                  {
                    "Fn::Sub": "arn:\${AWS::Partition}:logs:\${AWS::Region}:\${AWS::AccountId}:log-group:/aws/lambda/serverless-example-dev*:*:*",
                  },
                ],
              },
            ],
            "Version": "2012-10-17",
          },
          "PolicyName": {
            "Fn::Join": [
              "-",
              [
                "serverless-example",
                "dev",
                "lambda",
              ],
            ],
          },
        },
      ],
      "RoleName": {
        "Fn::Join": [
          "-",
          [
            "serverless-example",
            "dev",
            {
              "Ref": "AWS::Region",
            },
            "lambdaRole",
          ],
        ],
      },
    },
    "Type": "AWS::IAM::Role",
  },
  "ServerlessDeploymentBucket": {
    "Properties": {
      "BucketEncryption": {
        "ServerSideEncryptionConfiguration": [
          {
            "ServerSideEncryptionByDefault": {
              "SSEAlgorithm": "AES256",
            },
          },
        ],
      },
    },
    "Type": "AWS::S3::Bucket",
  },
  "ServerlessDeploymentBucketPolicy": {
    "Properties": {
      "Bucket": {
        "Ref": "ServerlessDeploymentBucket",
      },
      "PolicyDocument": {
        "Statement": [
          {
            "Action": "s3:*",
            "Condition": {
              "Bool": {
                "aws:SecureTransport": false,
              },
            },
            "Effect": "Deny",
            "Principal": "*",
            "Resource": [
              {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":s3:::",
                    {
                      "Ref": "ServerlessDeploymentBucket",
                    },
                    "/*",
                  ],
                ],
              },
              {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":s3:::",
                    {
                      "Ref": "ServerlessDeploymentBucket",
                    },
                  ],
                ],
              },
            ],
          },
        ],
      },
    },
    "Type": "AWS::S3::BucketPolicy",
  },
}
`;

exports[`individually 7`] = `
{
  "DependsOn": [
    "ApiGatewayMethodHello1Get",
    "ApiGatewayMethodHello2Get",
  ],
  "Properties": {
    "RestApiId": {
      "Ref": "ApiGatewayRestApi",
    },
    "StageName": "dev",
  },
  "Type": "AWS::ApiGateway::Deployment",
}
`;
